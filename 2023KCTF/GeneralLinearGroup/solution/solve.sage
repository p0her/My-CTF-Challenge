# SageMath version 9.5, Release Date: 2022-01-30

from Crypto.Util.number import inverse, long_to_bytes
import random

n = 11780684134748241137390693992601374900692624630484095977839626979713595609907340200458656014134025881893701396113322592331172709091598695483172008388413601095117216231336859606757648917073769705217946936068759478563787274175845180092076433627173364513368694786877677175477238985692133581437423542887656473558116425734957648773454628041745669770249911876276539900507503595313613970901845501598302460354023746395298433458385582404201075030619714447306428320625743769780611779862982144261897296004335214338413254729918105316880932611967455618451216622447492939988205337749105254033698350431363662332473013379254558759907
e = 65537
c = 10710321339912617180105113068280486130351307604215693482243166513463911791045762859197530257204528902854570527582244382516908644269795123966453641152417484369348835162451049237058181024313482252725612788290323340775197779478768930443626492252231826576812701644468274307695866106016804076645151204549263716609975283173444689058759433738124324002286452733394748211514899644413907546627115675352651873377401821830856358074510997137830464575656082860747003998663849901711569999649184249235551060700452991105190825061171164981773336875950285255975285109632652924261510076604057513322179840314802903452497311726515332302339

p = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F
assert is_prime(p)

N = 39
gl = GL(N, GF(p))
secret = matrix(gl.random_element())

val = 0
for i in range(N):
    for j in range(N):
        val += secret[i][j]

random.seed(int(val))

p, q = 0, 0
while True:
    p = random.randint(1, 1<<1024)
    if is_prime(p):
        break

while True:
    q = random.randint(1, 1<<1024)
    if is_prime(q):
        break

assert is_prime(p)
assert is_prime(q)
assert p * q == n

phi = (p - 1) * (q - 1)
d = inverse(e, phi)
flag = long_to_bytes(pow(int(c), int(d), int(n)))

print(f'FLAG = {flag.decode()}')

assert flag == b'KCTF{c8c70ff5ac34cee0003fe5fe65b2d044d267062e4e5ddc21911db9beefc6c9669442baf00f165da9679f9936cbaaa294757547a662723b8c93c433ffeb79caae}'